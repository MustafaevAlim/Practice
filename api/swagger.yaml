basePath: /
definitions:
  model.InfoSales:
    properties:
      company:
        type: string
      count:
        type: integer
      date:
        type: string
      name_prod:
        type: string
      price:
        type: number
      total:
        type: number
    type: object
  model.Sale:
    properties:
      company:
        type: string
      count:
        type: integer
      name_prod:
        type: string
      price:
        type: number
    required:
    - company
    - count
    - name_prod
    - price
    type: object
  model.User:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Генерация отчета по продажам за месяц.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Generate Geport
  version: "1.0"
paths:
  /JSONReport:
    get:
      consumes:
      - application/json
      description: Получает список всех продаж из базы данных и возвращает его в формате
        JSON
      produces:
      - application/json
      responses:
        "200":
          description: Список всех продаж
          schema:
            items:
              $ref: '#/definitions/model.InfoSales'
            type: array
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить все продажи
      tags:
      - reports
  /auth:
    post:
      consumes:
      - application/json
      description: Авторизует пользователя и возвращает JWT токен
      parameters:
      - description: Пользователь
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Авторизация пользователя
      tags:
      - auth
  /pdfReport:
    get:
      description: Генерирует и возвращает PDF отчет
      produces:
      - application/pdf
      responses:
        "200":
          description: OK
          schema:
            type: file
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить PDF отчет
      tags:
      - reports
  /register:
    post:
      consumes:
      - application/json
      description: Регистрирует нового пользователя на основе переданных данных
      parameters:
      - description: Данные пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная регистрация пользователя
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Неверный ввод данных
          schema:
            type: string
      summary: Регистрация нового пользователя
      tags:
      - users
  /sales:
    post:
      consumes:
      - application/json
      description: Создает новую запись о продаже в системе
      parameters:
      - description: Информация о продаже
        in: body
        name: sale
        required: true
        schema:
          $ref: '#/definitions/model.Sale'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное создание продажи
          schema:
            $ref: '#/definitions/model.Sale'
        "400":
          description: Ошибка в запросе
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Создание новой продажи
      tags:
      - sales
  /sales/{id}:
    delete:
      consumes:
      - application/json
      description: Удаляет запись о продаже по ID
      parameters:
      - description: ID записи о продаже
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Succesfully deleted
          schema:
            type: string
        "400":
          description: Неверный ID
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Удаление записи о продаже
      tags:
      - sales
  /welcome:
    get:
      consumes:
      - application/json
      description: Возвращает приветственное сообщение для авторизованного пользователя
      produces:
      - text/plain
      responses:
        "200":
          description: Welcome {email}!
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Приветствие пользователя
      tags:
      - user
securityDefinitions:
  BearerAuth:
    description: 'Введите JWT токен следующим образом: "Bearer {токен}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
